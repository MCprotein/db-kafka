services:
  controller-1:
    image: apache/kafka:latest
    container_name: controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  controller-2:
    image: apache/kafka:latest
    container_name: controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  controller-3:
    image: apache/kafka:latest
    container_name: controller-3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  broker-1:
    image: apache/kafka:latest
    container_name: broker-1
    ports:
      - "29092:9092"
      - "9997:9100"
    environment:
      KAFKA_NODE_ID: 4
      # KRaft 모드 사용시 프로세스가 어떤 역할을 하는지 설정 - [broker, controller]
      KAFKA_PROCESS_ROLES: broker
      # kafka가 바인딩하는 주소
      # INTERNAL: broker간 통신을 위한 내부주소
        # EXTERNAL: 외부 클라이언트와의 통신을 위한 외부주소
      KAFKA_LISTENERS: 'INTERNAL://:19092,EXTERNAL://:9092'
      # client와 통신하는 주소 (공개된 주소)
      # INTERNAL: broker간 통신을 위한 내부주소
      # EXTERNAL: 외부 클라이언트와의 통신을 위한 외부주소
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://broker-1:19092,EXTERNAL://localhost:29092'
      # 내부 브로커끼리 통신을 위한 리스너 이름 설정
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # 각 리스너 프로토콜의 보안을 key-value 형태로 설정
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # quorum: 다수결, 다수의 동의를 의미함.
      # controller quorum을 구성하는 노드들(투표자)의 주소를 설정
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - kafka_network

  broker-2:
    image: apache/kafka:latest
    container_name: broker-2
    ports:
      - 39092:9092
      - 9998:9998
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'INTERNAL://:19092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://broker-2:19092,EXTERNAL://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9998
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - kafka_network

  broker-3:
    image: apache/kafka:latest
    container_name: broker-3
    ports:
      - 49092:9092
      - 9999:9999
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'INTERNAL://:19092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://broker-3:19092,EXTERNAL://localhost:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9999
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - kafka_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - controller-1
      - controller-2
      - controller-3
      - broker-1
      - broker-2
      - broker-3
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      # 같은 docker network 안에 있으므로 INTERNAL 주소로 설정해야 한다.
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker-1:19092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
      KAFKA_CLUSTERS_1_NAME: local2
      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: broker-2:19092
      KAFKA_CLUSTERS_1_METRICS_PORT: 9998
      KAFKA_CLUSTERS_1_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_1_AUDIT_CONSOLEAUDITENABLED: true
      KAFKA_CLUSTERS_2_NAME: local3
      KAFKA_CLUSTERS_2_BOOTSTRAPSERVERS: broker-3:19092
      KAFKA_CLUSTERS_2_METRICS_PORT: 9999
      KAFKA_CLUSTERS_2_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_2_AUDIT_CONSOLEAUDITENABLED: true
      DYNAMIC_CONFIG_ENABLED: 'true'

    networks:
      - kafka_network

  mysql:
    container_name: mysql
    image: mysql
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: hello
      MYSQL_DATABASE: kafkacdc
    networks:
      - kafka_network

  debezium:
    image: quay.io/debezium/connect:3.0.6.Final
    container_name: debezium
    ports:
      - 8083:8083
    environment:
      # https://kafka.apache.org/documentation/#connect_running
      BOOTSTRAP_SERVERS: broker-1:19092,broker-2:19092,broker-3:19092
      GROUP_ID: debezium-00
      # topic to use for storing connector and task configurations;
      # note that this should be a single partition, highly replicated, compacted topic.
      # You may need to manually create the topic to ensure the correct configuration
      # as auto created topics may have multiple partitions or be automatically configured
      # for deletion rather than compaction
      CONFIG_STORAGE_TOPIC: DEBEZIUM_CONNECT_CONFIGS
      # opic to use for storing offsets;
      # this topic should have many partitions, be replicated, and be configured for compaction
      OFFSET_STORAGE_TOPIC: DEBEZIUM_CONNECT_OFFSETS
      # topic to use for storing statuses;
      # this topic can have multiple partitions, and should be replicated and configured for compaction
      STATUS_STORAGE_TOPIC: DEBEZIUM_CONNECT_STATUSES
    depends_on:
      - controller-1
      - controller-2
      - controller-3
      - broker-1
      - broker-2
      - broker-3
    networks:
      - kafka_network

  mongo_primary:
    image: mongo:latest
    container_name: mongo_primary
    hostname: mongo_primary
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: jjangu
      MONGO_INITDB_ROOT_PASSWORD: wow
    volumes:
      - ./mongodb/mongo_primary:/data/db
      - ./mongo_replica_key:/etc/mongodb.key
    command: ["--replSet", "mongo-replica", "--keyFile", "/etc/mongodb.key", "--bind_ip", "localhost, mongo_primary"]
    networks:
      - kafka_network
  mongo_secondary1:
    image: mongo:latest
    container_name: mongo_secondary1
    hostname: mongo_secondary1
    ports:
      - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: jjangu
      MONGO_INITDB_ROOT_PASSWORD: wow
    volumes:
      - ./mongodb/mongo_secondary1:/data/db
      - ./mongo_replica_key:/etc/mongodb.key
    command: ["--replSet", "mongo-replica", "--keyFile", "/etc/mongodb.key", "--bind_ip", "localhost, mongo_secondary1"]
    depends_on:
      - mongo_primary
    networks:
      - kafka_network
  mongo_secondary2:
    image: mongo:latest
    container_name: mongo_secondary2
    hostname: mongo_secondary2
    ports:
      - 27020:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: jjangu
      MONGO_INITDB_ROOT_PASSWORD: wow
    volumes:
      - ./mongodb/mongo_secondary2:/data/db
      - ./mongo_replica_key:/etc/mongodb.key
    command: ["--replSet", "mongo-replica", "--keyFile", "/etc/mongodb.key", "--bind_ip", "localhost, mongo_secondary2"]
    depends_on:
      - mongo_primary
    networks:
      - kafka_network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - metrics


networks:
  kafka_network:
    driver: bridge
  metrics:
    driver: bridge
